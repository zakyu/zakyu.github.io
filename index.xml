<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on 浩之的编程学习笔记</title>
    <link>https://zakyu.com/</link>
    <description>Recent content in Home on 浩之的编程学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 06 Jan 2023 23:36:08 +0800</lastBuildDate><atom:link href="https://zakyu.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>多重赋值</title>
      <link>https://zakyu.com/learn-go/program-structure/assignments/tuple-assignment/</link>
      <pubDate>Fri, 06 Jan 2023 17:36:38 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/program-structure/assignments/tuple-assignment/</guid>
      <description>在实际更新变量前，右边所有的表达式被推演。当变量同时出现在赋值符两侧时这种形式特别有用，例如，当交换两个变量时可以：
x, y = y, x 或者计算两个整数的最大公约数：
func gcd(x, y int) int { for y != 0 { x, y = y, x%y } return x } 可以将不需要的值赋值给空标识符。</description>
    </item>
    
    <item>
      <title>短变量声明</title>
      <link>https://zakyu.com/learn-go/program-structure/variables/short-variable-declarations/</link>
      <pubDate>Fri, 06 Jan 2023 17:30:59 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/program-structure/variables/short-variable-declarations/</guid>
      <description>在函数中，一种称作短变量声明的可选形式可以用来声明和初始化局部变量。 它使用name := expression的形式，name的类型由expression的类型决定。
多变量的短变量声明：
i, j := 0, 1 短变量声明不需要声明所有在左边的变量。如果一些变量在同一个词法中声明，那么对于那些变量，短声明的行为等同于赋值。
短变量声明至少声明一个新变量，否则，代码编译无法通过。</description>
    </item>
    
    <item>
      <title>名称</title>
      <link>https://zakyu.com/learn-go/program-structure/names/</link>
      <pubDate>Thu, 05 Jan 2023 21:16:06 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/program-structure/names/</guid>
      <description>Go中函数、变量、常量、类型、语句标签和包的名称遵循一个简单的规则：名称的开头是一个字母（Unicode中的字符即可）或下划线，后面可以跟任意数量的字符、数字和下划线，并区分大小写。
Go有25个关键字，只能用在语法允许的地方，不能作为名称：
break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var 另外有三十几个内置的预声明的常量、类型和函数： 常量： true、false、iota、nil 类型： int、int8、int16、int32、int64、 uint、uint8、uint16、uint32、uint64、uintptr、 float32、float64、complex128、complex64、 bool、byte、rune、string、error 函数： make、len、cap、new、append、copy、close、delete、 complex、real、imag、 panic、recover 这些名称不是预留的，可以在声明中使用它们。
实体的第一个字母的大小写决定其可见性是否跨包。
包名本身总是由小写字母组成。
通常，名称的作用域越大，就使用越长且有意义的名称。
风格上，当遇到由单词组合的名称时，Go程序员使用“驼峰式”的风格。</description>
    </item>
    
    <item>
      <title>包初始化</title>
      <link>https://zakyu.com/learn-go/program-structure/packages-and-files/package-initialization/</link>
      <pubDate>Fri, 06 Jan 2023 18:59:27 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/program-structure/packages-and-files/package-initialization/</guid>
      <description>包的初始化从初始化包级别的变量开始，这些变量按照声明顺序初始化，在依赖已解析完毕的情况下，根据依赖的顺序进行。
var a = b + c // 3. 最后把a初始化为3 var b = f() // 2. 通过调用f，接着把b初始化为2 var c = 1 // 1. 首先初始化为1 func f() int { return c+1 } 如果包由多个.go文件组成，初始化按照编译器收到文件的顺序进行：go工具会在调用编译器前将.go文件进行排序。
对于包级别的每一个变量，生命周期从其值被初始化开始，但是对于其他一些变量，比如数据表，初始化表达式不是简单地设置它的初始值。这种情况下，init函数的机制会比较简单。 任何文件可以包含任意数量的声明如下的函数：
func init() { ... } 这个init函数不能被调用和被引用，另一方面，它也是普通的函数。 在每一个文件里，当程序启动时，init函数按照它们声明的顺序自动执行。
包的初始化按照在程序中导入的顺序来进行，依赖顺序优先，每次初始化一个包。 初始化过程时自下而上的，main包最后初始化。</description>
    </item>
    
    <item>
      <title>可赋值性</title>
      <link>https://zakyu.com/learn-go/program-structure/assignments/assignability/</link>
      <pubDate>Fri, 06 Jan 2023 17:37:12 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/program-structure/assignments/assignability/</guid>
      <description>赋值语句是显式形式的赋值，但是程序中很多地方的赋值是隐式的：
一个函数调用隐式地将参数的值赋给对应参数的变量 一个return语句隐式地将return操作数赋值给结果变量。 复合类型的字面量表达式，隐式地给每个元素赋值。map和通道的元素尽管不是普通变量，但它们也遵循相似的隐式赋值。 赋值只有在值对于变量类型是可赋值时才合法。
可赋值性根据类型不同有着不同的规则。
类型必须精准匹配 nil可以被赋值给任何接口变量或引用变量。 常量有更灵活的可赋值性规则来规避显式的转换。 两个值使用!=和==进行比较与可赋值性相关：任何比较中，第一个操作数相对于第二个操作数的类型必须是可赋值的，或者可以反过来赋值。</description>
    </item>
    
    <item>
      <title>Pointers</title>
      <link>https://zakyu.com/learn-go/program-structure/variables/pointers/</link>
      <pubDate>Fri, 06 Jan 2023 17:31:42 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/program-structure/variables/pointers/</guid>
      <description>变量是存储值的地方。
指针的值是一个变量的地址。 不是所有的值都有地址，但是所有的变量都有。 使用指针，可以在无须知道变量名字的情况下，间接读取或更新变量的值。
如果一个变量声明为：var x int 表达式&amp;amp;x（x的地址）获取一个指向整型变量的指针，指针的类型是整型指针（*int）。 如果值叫作p，我们说p指向x，或者p包含x的地址。 p指向的变量写成*p，表达式*p获取变量的值。 *p可以出现在赋值操作符左边，用于更新变量的值。
x := 1 p := &amp;amp;x // p 是整型指针，指向x fmt.Println(*p) // 1 *p = 2 // 等于 x = 2 fmt.Println(x) // 2 每一个聚合类型变量的组成（结构体的成员或数组中的元素）都是变量，所以也有一个地址。
变量有时候使用一个地址化的值。 代表变量的表达式，是唯一可以应用的取地址操作符&amp;amp;的表达式。
指针类型的零值是nil。
指针是可比较的，两个指针当且仅当指向同一个变量或者两者都是nil的情况下才相等。
函数返回局部变量的地址是安全的。例如：
var p = f() func f() *int { v := 1 return &amp;amp;v } 通过调用f产生的局部变量v即使在调用返回后依然存在，指针p依然引用它。 每次调用f返回的值不一定相同。
每次使用变量的地址或复制一个指针，我们就创建了新的别名或方式来标记同一变量。 指针别名允许我们不用变量的名字来访问变量，这一点非常有用，但是它是双刃剑：为了找到所有访问变量的语句，需要知道所有的别名。 不仅指针产生别名，当复制其他引用类型的值时，也会产生别名。
package main import ( &amp;#34;flag&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; ) var n = flag.</description>
    </item>
    
    <item>
      <title>声明</title>
      <link>https://zakyu.com/learn-go/program-structure/declarations/</link>
      <pubDate>Thu, 05 Jan 2023 21:35:54 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/program-structure/declarations/</guid>
      <description>声明给一个程序实体命名，并且设定其部分或全部属性。
有4个主要的声明：变量（var）、常量（const）、类型（type）、函数（func）
Go程序存储在一个或多个以.go为后缀的文件里。 每一个文件以package声明开头，表明文件属于哪个包。 package声明后面是import声明。 import声明后面是包级别的类型、变量、常量、函数的声明，不区分顺序。
package main import &amp;#34;fmt&amp;#34; const boilingF = 212.0 func main() { var f = boilingF var c = (f - 32) * 5 / 9 fmt.Printf(&amp;#34;boiling point = %g°F or %g°C\n&amp;#34;, f, c) } 包级别的实体名字不仅对于包含其声明的源文件可见，对于同一个包里面的所有源文件都可见。
局部声明仅仅是在声明所在的函数内部可见，也可能对于函数的一小块区域可见。
函数的声明包含一个名字、一个参数列表（由函数的调用者提供的变量）、一个可选的返回值列表，以及函数体（其中包含具体逻辑语句）。如果函数不返回任何内容，返回值列表可以省略。 函数的执行从第一个语句开始，直到遇到一个返回语句，或者执行到无返回结果的函数的结尾。 然后程序控制和返回值（如果有的话）都返回给调用者。
package main import &amp;#34;fmt&amp;#34; func main() { const freezingF, boilingF = 32.0, 212.0 fmt.Printf(&amp;#34;%g°F = %g°C\n&amp;#34;, freezingF, fToC(freezingF)) fmt.Printf(&amp;#34;%g°F = %g°C\n&amp;#34;, boilingF, fToC(boilingF)) } func fToC(f float64) float64 { return (f - 32) * 5 / 9 } </description>
    </item>
    
    <item>
      <title>new函数</title>
      <link>https://zakyu.com/learn-go/program-structure/variables/the-new-function/</link>
      <pubDate>Fri, 06 Jan 2023 17:32:26 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/program-structure/variables/the-new-function/</guid>
      <description>另一种创建变量的方式：使用内置的new函数创建变量。
表达式new(T)创建一个未命名的T类型变量，初始化为T类型的零值，并返回其地址（地址类型为*T）。
p := new(int) // *int类型的p，指向未命名的int变量 fmt.Println(*p) // 0 *p = 2 // 把未命名的int设置为2 fmt.Println(*p) // 2 使用new创建的变量和取其地址的普通局部变量没有什么不同，只是不需要引入一个虚拟的名字，通过new(T)就可以直接在表达式中使用。 new只是语法上的便利，不是一个基础概念。
每一次调用new返回一个具有唯一地址的不同变量。 这个规则有一个例外：两个变量的类型不携带任何信息且是零值，例如struct{}或[0]int，当前的实现里面，它们有相同的地址。
new是一个预声明的函数，不是一个关键字，所以它可以重定义为另外的其他类型。</description>
    </item>
    
    <item>
      <title>Lifetime of Variables</title>
      <link>https://zakyu.com/learn-go/program-structure/variables/lifetime-of-variables/</link>
      <pubDate>Fri, 06 Jan 2023 17:32:58 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/program-structure/variables/lifetime-of-variables/</guid>
      <description>生命周期指程序执行过程中变量存在的时间段。
包级别变量的生命周期是整个程序执行时间。
局部变量有一个动态的生命周期：每次执行声明语句时创建一个新的实体，变量一直生存到它变得不可访问，这时它占用的存储空间被回收。
函数的参数和返回值也是局部变量，它们在其闭包函数被调用的时候创建。
for i := 0; i &amp;lt; 10; i++ { x := 1 fmt.Println(x) } 变量i在每次for循环的开始创建，变量x在每次迭代中创建。
垃圾回收器如何知道一个变量是否应该被回收？ 基本思路是每一个包级别的变量，以及每一个当前执行函数的局部变量，可以作为追溯变量的路径的源头，通过指针和其他方式的引用可以找到变量。如果变量的路径不存在，那么变量变得不可访问，因此它不会影响任何其他的计算过程。 因为变量的生命周期是通过它是否可达来确定的，所以局部变量可在包含它的循环的一次迭代之外继续存活。即使包含它的循环已经返回，它的存在还可能延续。
编译器可以选择使用堆或栈上的空间分配，这个选择不是基于使用var或new关键字来声明变量。
var global *int func f() { var x int x = 1 global = &amp;amp;x } func g() { y := new(int) *y = 1 } 这里，x一定使用堆空间，因为它在f函数返回以后还可以从global变量访问，尽管它被声明为一个局部变量。这种情况我们说x从f中逃逸。 相反，当g函数返回时，变量*y变得不可访问，可回收。因为*y没有从g函数中逃逸，所以编译器可以安全地在栈上分配*y，即便使用new函数创建它。
任何情况下，逃逸的概念使得不需要额外费心来写正确的代码，但要记住它在性能优化的时候是有好处的，因为每一次变量逃逸都需要一次额外的内存分配过程。
在长生命周期对象中保持短生命周期对象不必要的指针，特别是在全局变量中，会阻止垃圾回收器回收短生命周期的对象空间。</description>
    </item>
    
    <item>
      <title>Type Declarations</title>
      <link>https://zakyu.com/learn-go/program-structure/type-declarations/</link>
      <pubDate>Fri, 06 Jan 2023 17:43:20 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/program-structure/type-declarations/</guid>
      <description>type声明定义一个新的命名类型，它和某个已有类型使用同样的底层类型。
type name underlying-type 类型通常出现在包级别，这里命名的类型在整个包中可见，如果名字是导出的（开头使用大写字母），其他包也可以访问它。
package tempconv type Celsius float64 type Fahrenheit float64 const ( AbsoluteZeroC Celsius = -273.15 FreezingC Celsius = 0 BoilingC Celsius = 100 ) func CToF(c Celsius) Fahrenheit { return Fahrenheit(c*9/5 + 32) } func FToC(f Fahrenheit) Celsius { return Celsius((f - 32) * 5 / 9) } 这个包定义了两个类型：Celsius和Fahrenheit。 即使使用相同的底层类型float64，它们也不是相同类型，所以它们不能使用算术表达式进行比较和合并。 从float64转换为Celsius或Fahrenheit需要显式类型转换。 Celsius(t)和Fahrenheit(t)是类型转换，而不是函数调用。它们不会改变值和表达方式，但改变了显式意义。
对于每个类型T，都有一个对应的类型转换操作T(x)将值x转换为类型T。 如果两个类型具有相同的底层类型或二者都是指向相同底层类型变量的未命名指针类型，则二者是可以相互转换的。 类型转换不改变类型值的表达方式，仅改变类型。 如果x对于类型T是可赋值的，类型转换也是允许的，但是通常是不必要的。
数字类型间的转换，字符串和一些slice类型间的转换是允许的。 这些转换会改变值的表达方式。 任何情况下，运行时的转换不会失败。
命名类型的底层类型决定了它的结构和表达方式，以及它支持的内部操作集合，这些内部操作与直接使用底层类型的情况相同。
通过==和&amp;lt;之类的比较操作符，命名类型的值可以与其相同类型的值或者底层类型相同的未命名类型的值相比较。但是不同命名类型的值不能直接比较。
func (c Celsius) String() string { return fmt.</description>
    </item>
    
    <item>
      <title>Hello, World</title>
      <link>https://zakyu.com/learn-go/tutorial/helloworld/</link>
      <pubDate>Wed, 04 Jan 2023 19:40:37 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/tutorial/helloworld/</guid>
      <description>package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello world.&amp;#34;); } $ go run main.go or $ go build main.go $ ./main Go代码是使用包来组织的，包类似于其他语言中的库和模块。 一个包由一个或多个.go源文件组成，放在一个文件夹中，该文件夹的名字描述了包的作用。 每一个源文件的开始都用package声明，指明了这个文件属于哪个包。 后面跟着它导入的其他包的列表，然后是存储在文件中的程序声明。
名为main的包比较特殊，它用来定义一个独立的可执行程序，而不是库。 在main包中，函数main也是特殊的，它总是程序开始执行的地方。
必须精确地导入需要的包。在缺失导入或存在不需要的包的情况下，编译会失败。
import声明必须跟在package声明之后。
import导入声明后面，是组成程序的函数、变量、常量、类型声明。
Go不需要在语句或声明的后面使用分号结尾，除非有多个语句或声明出现在同一行。
事实上，跟在特定符号后面的换行符被转换为分号，在什么地方进行换行会影响对Go代码的解析。例如：
函数的{符号必须和关键字func在同一行，不能独立成行， 在x+y这个表达式中，换行符可以在+操作符的后面，但是不能在其之前。 </description>
    </item>
    
    <item>
      <title>编译器</title>
      <link>https://zakyu.com/learn-c/prepare/compiler/</link>
      <pubDate>Sat, 31 Dec 2022 23:51:40 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-c/prepare/compiler/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Scope</title>
      <link>https://zakyu.com/learn-go/program-structure/scope/</link>
      <pubDate>Fri, 06 Jan 2023 23:36:08 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/program-structure/scope/</guid>
      <description>声明将名字和程序实体关联起来，如一个函数或一个变量。 声明的作用域是指用到声明时所声明名字的源代码段。
不要将作用域和生命周期混淆。 声明的作用域是声明在程序文本中出现的区域，它是一个编译时属性。 变量的生命周期是变量在程序执行期间能被程序的其他部分所引用的起止时间，它是一个运行时属性。
语法块是由大括号包围起来的一个语句序列，比如一个函数体或循环体。</description>
    </item>
    
    <item>
      <title>命令行参数</title>
      <link>https://zakyu.com/learn-go/tutorial/command-line-arguments/</link>
      <pubDate>Wed, 04 Jan 2023 20:09:49 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/tutorial/command-line-arguments/</guid>
      <description>os包提供一些函数和变量，以与平台无关的方式和操作系统交互。
命令行参数以os包中Args名字的变量供程序访问，在os包外面，使用os.Args这个名字。
变量os.Args是一个字符串slice，是一个动态容量的顺序数组s，可以通过s[i]来访问单个元素，通过s[m:n]来访问一段连续子区间，数组长度用len(s)表示。
在Go中，所有的索引使用半开区间，即包含第一个索引，不包含最后一个索引。例如，slice s[m:n]，其中0≤m≤n≤len(s)，包含n-m个元素。
os.Args的第一个元素os.Args[0]是命令本身的名字；其他元素是程序开始执行时的参数。
// echo 输出其命令行参数 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) func main() { var s, sep string for i := 1; i &amp;lt; len(os.Args); i++ { s += sep + os.Args[i] sep = &amp;#34; &amp;#34; } fmt.Println(s) } 注释以//开头。
:=符号用于短变量声明，这种语句声明一个或多个变量，并且根据初始化的值给予合适的类型。
递增语句x++、递减语句x&amp;ndash;
是语句，而不像其他C族语言一样是表达式，所以y=x++、y=x&amp;ndash;是不合法的 仅支持后缀，所以&amp;ndash;x不合法。 for是Go里面的唯一循环语句。
for initialization; condition; post { // 零个或多个语句 } for循环的三个组成部分两边不用小括号。大括号是必需的，左大括号必须和post语句在同一行。
initialization语句在循环开始之前执行。如果存在，它必须是一个简单的语句，比如：
简短的变量声明 递增或赋值语句 函数调用 condition语句是一个布尔表达式，在循环的每一次迭代开始前推演。
post语句在循环体之后被执行。
三部分都是可以省略的。
如果没有initialization语句和post语句，分号可以省略：
for condition { // .</description>
    </item>
    
    <item>
      <title>编辑器</title>
      <link>https://zakyu.com/learn-c/prepare/editor/</link>
      <pubDate>Sat, 31 Dec 2022 23:51:55 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-c/prepare/editor/</guid>
      <description></description>
    </item>
    
    <item>
      <title>找出重复行</title>
      <link>https://zakyu.com/learn-go/tutorial/find-duplicate-lines/</link>
      <pubDate>Wed, 04 Jan 2023 21:45:37 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/tutorial/find-duplicate-lines/</guid>
      <description>// 输出标准输入中出现次数大于1的行，前面是次数 package main import ( &amp;#34;bufio&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) func main() { counts := make(map[string]int) input := bufio.NewScanner(os.Stdin) for input.Scan() { counts[input.Text()]++ } for line, n := range counts { if n &amp;gt;= 1 { fmt.Printf(&amp;#34;%d\t%s\n&amp;#34;, n, line) } } } if语句中的条件部分也不放在圆括号里，但程序体中需要用到大括号。这里还有一个可选的else部分，当条件为false时执行。
map存储一个键/值对集合，并且提供常量时间的操作来存储、获取或测试集合中的某个元素。
键可以是其值能够进行相等（==）比较的任意类型。 值可以是任意类型。 键在map中不存在也是没问题的。当一个新的行第一次出现时，右边的表达式根据值类型被推演为零值。
map里面的键的迭代顺序不是固定的，通常是随机的，每次运行都不一致。
bufio包可以简便高效地处理输入和输出。 类型Scanner，扫描器，它可以读取输入，以行或者单词为单位断开，这是处理以行为单位的输入内容的最简单方式。
程序使用短变量的声明方式，新建一个bufio.Scanner类型input变量：
input := bufio.NewScanner(os.Stdin) 扫描器从程序的标准输入进行读取。每一次调用input.Scan()读取下一行，并且将结尾的换行符去掉；Scan()函数在读到新行的时候返回true，在没有更多内容时返回false。 通过调用input.Text()来获取读到的内容。
// 打印输入中多次出现的行的个数和文本 // 它从 stdin 或指定的文件列表读取 package main import ( &amp;#34;bufio&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) func main() { counts := make(map[string]int) files := os.</description>
    </item>
    
    <item>
      <title>GIF 动画</title>
      <link>https://zakyu.com/learn-go/tutorial/animated-gifs/</link>
      <pubDate>Wed, 04 Jan 2023 23:08:49 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/tutorial/animated-gifs/</guid>
      <description>package main import ( &amp;#34;image&amp;#34; &amp;#34;image/color&amp;#34; &amp;#34;image/gif&amp;#34; &amp;#34;io&amp;#34; &amp;#34;log&amp;#34; &amp;#34;math&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os&amp;#34; &amp;#34;time&amp;#34; ) var palette = []color.Color{color.White, color.Black} const ( whiteIndex = 0 blackIndex = 1 ) func main() { rand.Seed(time.Now().UTC().UnixNano()) if len(os.Args) &amp;gt; 1 &amp;amp;&amp;amp; os.Args[1] == &amp;#34;web&amp;#34; { handler := func(w http.ResponseWriter, r *http.Request) { lissajous(w) } http.HandleFunc(&amp;#34;/&amp;#34;, handler) log.Fatal(http.ListenAndServe(&amp;#34;localhost:8080&amp;#34;, nil)) } lissajous(os.Stdout) } func lissajous(out io.Writer) { const ( cycles = 5 res = 0.001 size = 100 nframes = 64 delay = 8 ) freq := rand.</description>
    </item>
    
    <item>
      <title>获取一个 URL</title>
      <link>https://zakyu.com/learn-go/tutorial/fetching-a-url/</link>
      <pubDate>Wed, 04 Jan 2023 23:56:54 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/tutorial/fetching-a-url/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os&amp;#34; ) func main() { for _, url := range os.Args { resp, err := http.Get(url) if err != nil { fmt.Fprintf(os.Stderr, &amp;#34;fetch: %v\n&amp;#34;, err) os.Exit(1) } b, err := ioutil.ReadAll(resp.Body) resp.Body.Close() if err != nil { fmt.Fprintf(os.Stderr, &amp;#34;fetch: %v\n&amp;#34;, err) os.Exit(1) } fmt.Printf(&amp;#34;%s&amp;#34;, b) } } http.Get函数产生一个HTTP请求。</description>
    </item>
    
    <item>
      <title>并发获取多个 URL</title>
      <link>https://zakyu.com/learn-go/tutorial/fetching-urls-concurrently/</link>
      <pubDate>Thu, 05 Jan 2023 18:24:04 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/tutorial/fetching-urls-concurrently/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;io&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os&amp;#34; &amp;#34;time&amp;#34; ) func main() { start := time.Now() ch := make(chan string) for _, url := range os.Args[1:] { go fetch(url, ch) } for range os.Args[1:] { fmt.Println(&amp;lt;-ch) } fmt.Printf(&amp;#34;%.2fs elapsed\n&amp;#34;, time.Since(start).Seconds()) } func fetch(url string, ch chan&amp;lt;- string) { start := time.Now() resp, err := http.Get(url) if err != nil { ch &amp;lt;- fmt.Sprint(err) return } nbytes, err := io.Copy(ioutil.Discard, resp.</description>
    </item>
    
    <item>
      <title>一个 Web 服务器</title>
      <link>https://zakyu.com/learn-go/tutorial/a-web-server/</link>
      <pubDate>Thu, 05 Jan 2023 18:37:42 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/tutorial/a-web-server/</guid>
      <description>// 回声服务器 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { http.HandleFunc(&amp;#34;/&amp;#34;, handler) log.Fatal(http.ListenAndServe(&amp;#34;localhost:8080&amp;#34;, nil)) } func handler(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, &amp;#34;URL.Path = %q\n&amp;#34;, r.URL.Path) } // 回声服务器和计数服务器 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;sync&amp;#34; ) var mu sync.Mutex var count int func main() { http.HandleFunc(&amp;#34;/&amp;#34;, handler) http.HandleFunc(&amp;#34;/count&amp;#34;, counter) log.Fatal(http.ListenAndServe(&amp;#34;localhost:8080&amp;#34;, nil)) } func handler(w http.ResponseWriter, r *http.Request) { mu.Lock() count++ mu.Unlock() fmt.Fprintf(w, &amp;#34;URL.Path = %q\n&amp;#34;, r.</description>
    </item>
    
    <item>
      <title>更多</title>
      <link>https://zakyu.com/learn-go/tutorial/loose-ends/</link>
      <pubDate>Thu, 05 Jan 2023 19:01:36 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/tutorial/loose-ends/</guid>
      <description> 控制流 if语句 for语句
switch语句 case语句从上到下进行推演，所以第一个匹配的case语句会被执行。 如果没有case语句符合条件，那么可选的default语句被执行。 default语句可以放在任意地方。 case语句不想C语言那样从上到下贯穿执行。（fallthrough语句可以改写这个行为）
switch语句可以不要操作数，它就像一个case语句列表，每条case语句都是一个布尔表达式：
func Signum(x int) int { switch { case x &amp;gt; 0: return +1 default: return 0 case x &amp;lt; 0: return -1 } } 这种形式称为无标签（tagless）选择，它等价于switch true。
break和continue语句可以改变控制流。
命名类型 type声明给已有类型命名。
指针 指针的值是变量的地址。 指针显式可见。 使用&amp;amp;操作符可以获取一个变量的地址。 使用*操作符可以获取指针引用的变量的值。 指针不支持算术运算
方法和接口 一个关联了命名类型的函数称为方法。 Go里面的方法可以关联到几乎所有的命名类型。
接口可以用相同的方式处理不同的具体类型的抽象类型，它基于这些类型所包含的方法，而不是类型描述或实现。
包 Go自带一个可扩展并且实用的标准库。 Go社区创建和共享了更多的库。 可以在https://golang.org/pkg找到标准包的索引。 社区贡献的包可以在https://godoc.org找到。 使用go doc工具可以方便地通过命令行访问这些文档
$ go doc http.Get 注释 单行注释：// 多行注释：/* ... */ </description>
    </item>
    
  </channel>
</rss>
