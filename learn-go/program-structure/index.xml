<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>程序结构 on 浩之的编程学习笔记</title>
    <link>https://zakyu.com/learn-go/program-structure/</link>
    <description>Recent content in 程序结构 on 浩之的编程学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 05 Jan 2023 21:14:12 +0800</lastBuildDate><atom:link href="https://zakyu.com/learn-go/program-structure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>名称</title>
      <link>https://zakyu.com/learn-go/program-structure/names/</link>
      <pubDate>Thu, 05 Jan 2023 21:16:06 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/program-structure/names/</guid>
      <description>Go中函数、变量、常量、类型、语句标签和包的名称遵循一个简单的规则：名称的开头是一个字母（Unicode中的字符即可）或下划线，后面可以跟任意数量的字符、数字和下划线，并区分大小写。
Go有25个关键字，只能用在语法允许的地方，不能作为名称：
break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var 另外有三十几个内置的预声明的常量、类型和函数： 常量： true、false、iota、nil 类型： int、int8、int16、int32、int64、 uint、uint8、uint16、uint32、uint64、uintptr、 float32、float64、complex128、complex64、 bool、byte、rune、string、error 函数： make、len、cap、new、append、copy、close、delete、 complex、real、imag、 panic、recover 这些名称不是预留的，可以在声明中使用它们。
实体的第一个字母的大小写决定其可见性是否跨包。
包名本身总是由小写字母组成。
通常，名称的作用域越大，就使用越长且有意义的名称。
风格上，当遇到由单词组合的名称时，Go程序员使用“驼峰式”的风格。</description>
    </item>
    
    <item>
      <title>声明</title>
      <link>https://zakyu.com/learn-go/program-structure/declarations/</link>
      <pubDate>Thu, 05 Jan 2023 21:35:54 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/program-structure/declarations/</guid>
      <description>声明给一个程序实体命名，并且设定其部分或全部属性。
有4个主要的声明：变量（var）、常量（const）、类型（type）、函数（func）
Go程序存储在一个或多个以.go为后缀的文件里。 每一个文件以package声明开头，表明文件属于哪个包。 package声明后面是import声明。 import声明后面是包级别的类型、变量、常量、函数的声明，不区分顺序。
package main import &amp;#34;fmt&amp;#34; const boilingF = 212.0 func main() { var f = boilingF var c = (f - 32) * 5 / 9 fmt.Printf(&amp;#34;boiling point = %g°F or %g°C\n&amp;#34;, f, c) } 包级别的实体名字不仅对于包含其声明的源文件可见，对于同一个包里面的所有源文件都可见。
局部声明仅仅是在声明所在的函数内部可见，也可能对于函数的一小块区域可见。
函数的声明包含一个名字、一个参数列表（由函数的调用者提供的变量）、一个可选的返回值列表，以及函数体（其中包含具体逻辑语句）。如果函数不返回任何内容，返回值列表可以省略。 函数的执行从第一个语句开始，直到遇到一个返回语句，或者执行到无返回结果的函数的结尾。 然后程序控制和返回值（如果有的话）都返回给调用者。
package main import &amp;#34;fmt&amp;#34; func main() { const freezingF, boilingF = 32.0, 212.0 fmt.Printf(&amp;#34;%g°F = %g°C\n&amp;#34;, freezingF, fToC(freezingF)) fmt.Printf(&amp;#34;%g°F = %g°C\n&amp;#34;, boilingF, fToC(boilingF)) } func fToC(f float64) float64 { return (f - 32) * 5 / 9 } </description>
    </item>
    
    <item>
      <title>Type Declarations</title>
      <link>https://zakyu.com/learn-go/program-structure/type-declarations/</link>
      <pubDate>Fri, 06 Jan 2023 17:43:20 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/program-structure/type-declarations/</guid>
      <description>type声明定义一个新的命名类型，它和某个已有类型使用同样的底层类型。
type name underlying-type 类型通常出现在包级别，这里命名的类型在整个包中可见，如果名字是导出的（开头使用大写字母），其他包也可以访问它。
package tempconv type Celsius float64 type Fahrenheit float64 const ( AbsoluteZeroC Celsius = -273.15 FreezingC Celsius = 0 BoilingC Celsius = 100 ) func CToF(c Celsius) Fahrenheit { return Fahrenheit(c*9/5 + 32) } func FToC(f Fahrenheit) Celsius { return Celsius((f - 32) * 5 / 9) } 这个包定义了两个类型：Celsius和Fahrenheit。 即使使用相同的底层类型float64，它们也不是相同类型，所以它们不能使用算术表达式进行比较和合并。 从float64转换为Celsius或Fahrenheit需要显式类型转换。 Celsius(t)和Fahrenheit(t)是类型转换，而不是函数调用。它们不会改变值和表达方式，但改变了显式意义。
对于每个类型T，都有一个对应的类型转换操作T(x)将值x转换为类型T。 如果两个类型具有相同的底层类型或二者都是指向相同底层类型变量的未命名指针类型，则二者是可以相互转换的。 类型转换不改变类型值的表达方式，仅改变类型。 如果x对于类型T是可赋值的，类型转换也是允许的，但是通常是不必要的。
数字类型间的转换，字符串和一些slice类型间的转换是允许的。 这些转换会改变值的表达方式。 任何情况下，运行时的转换不会失败。
命名类型的底层类型决定了它的结构和表达方式，以及它支持的内部操作集合，这些内部操作与直接使用底层类型的情况相同。
通过==和&amp;lt;之类的比较操作符，命名类型的值可以与其相同类型的值或者底层类型相同的未命名类型的值相比较。但是不同命名类型的值不能直接比较。
func (c Celsius) String() string { return fmt.</description>
    </item>
    
    <item>
      <title>Scope</title>
      <link>https://zakyu.com/learn-go/program-structure/scope/</link>
      <pubDate>Fri, 06 Jan 2023 23:36:08 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/program-structure/scope/</guid>
      <description>声明将名字和程序实体关联起来，如一个函数或一个变量。 声明的作用域是指用到声明时所声明名字的源代码段。
不要将作用域和生命周期混淆。 声明的作用域是声明在程序文本中出现的区域，它是一个编译时属性。 变量的生命周期是变量在程序执行期间能被程序的其他部分所引用的起止时间，它是一个运行时属性。
语法块是由大括号包围起来的一个语句序列，比如一个函数体或循环体。</description>
    </item>
    
  </channel>
</rss>
