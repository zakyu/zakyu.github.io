<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>快速入门 on 浩之的编程学习笔记</title>
    <link>https://zakyu.com/learn-go/tutorial/</link>
    <description>Recent content in 快速入门 on 浩之的编程学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 04 Jan 2023 19:39:53 +0800</lastBuildDate><atom:link href="https://zakyu.com/learn-go/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hello, World</title>
      <link>https://zakyu.com/learn-go/tutorial/helloworld/</link>
      <pubDate>Wed, 04 Jan 2023 19:40:37 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/tutorial/helloworld/</guid>
      <description>package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello world.&amp;#34;); } $ go run main.go or $ go build main.go $ ./main Go代码是使用包来组织的，包类似于其他语言中的库和模块。 一个包由一个或多个.go源文件组成，放在一个文件夹中，该文件夹的名字描述了包的作用。 每一个源文件的开始都用package声明，指明了这个文件属于哪个包。 后面跟着它导入的其他包的列表，然后是存储在文件中的程序声明。
名为main的包比较特殊，它用来定义一个独立的可执行程序，而不是库。 在main包中，函数main也是特殊的，它总是程序开始执行的地方。
必须精确地导入需要的包。在缺失导入或存在不需要的包的情况下，编译会失败。
import声明必须跟在package声明之后。
import导入声明后面，是组成程序的函数、变量、常量、类型声明。
Go不需要在语句或声明的后面使用分号结尾，除非有多个语句或声明出现在同一行。
事实上，跟在特定符号后面的换行符被转换为分号，在什么地方进行换行会影响对Go代码的解析。例如：
函数的{符号必须和关键字func在同一行，不能独立成行， 在x+y这个表达式中，换行符可以在+操作符的后面，但是不能在其之前。 </description>
    </item>
    
    <item>
      <title>命令行参数</title>
      <link>https://zakyu.com/learn-go/tutorial/command-line-arguments/</link>
      <pubDate>Wed, 04 Jan 2023 20:09:49 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/tutorial/command-line-arguments/</guid>
      <description>os包提供一些函数和变量，以与平台无关的方式和操作系统交互。
命令行参数以os包中Args名字的变量供程序访问，在os包外面，使用os.Args这个名字。
变量os.Args是一个字符串slice，是一个动态容量的顺序数组s，可以通过s[i]来访问单个元素，通过s[m:n]来访问一段连续子区间，数组长度用len(s)表示。
在Go中，所有的索引使用半开区间，即包含第一个索引，不包含最后一个索引。例如，slice s[m:n]，其中0≤m≤n≤len(s)，包含n-m个元素。
os.Args的第一个元素os.Args[0]是命令本身的名字；其他元素是程序开始执行时的参数。
// echo 输出其命令行参数 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) func main() { var s, sep string for i := 1; i &amp;lt; len(os.Args); i++ { s += sep + os.Args[i] sep = &amp;#34; &amp;#34; } fmt.Println(s) } 注释以//开头。
:=符号用于短变量声明，这种语句声明一个或多个变量，并且根据初始化的值给予合适的类型。
递增语句x++、递减语句x&amp;ndash;
是语句，而不像其他C族语言一样是表达式，所以y=x++、y=x&amp;ndash;是不合法的 仅支持后缀，所以&amp;ndash;x不合法。 for是Go里面的唯一循环语句。
for initialization; condition; post { // 零个或多个语句 } for循环的三个组成部分两边不用小括号。大括号是必需的，左大括号必须和post语句在同一行。
initialization语句在循环开始之前执行。如果存在，它必须是一个简单的语句，比如：
简短的变量声明 递增或赋值语句 函数调用 condition语句是一个布尔表达式，在循环的每一次迭代开始前推演。
post语句在循环体之后被执行。
三部分都是可以省略的。
如果没有initialization语句和post语句，分号可以省略：
for condition { // .</description>
    </item>
    
    <item>
      <title>找出重复行</title>
      <link>https://zakyu.com/learn-go/tutorial/find-duplicate-lines/</link>
      <pubDate>Wed, 04 Jan 2023 21:45:37 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/tutorial/find-duplicate-lines/</guid>
      <description>// 输出标准输入中出现次数大于1的行，前面是次数 package main import ( &amp;#34;bufio&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) func main() { counts := make(map[string]int) input := bufio.NewScanner(os.Stdin) for input.Scan() { counts[input.Text()]++ } for line, n := range counts { if n &amp;gt;= 1 { fmt.Printf(&amp;#34;%d\t%s\n&amp;#34;, n, line) } } } if语句中的条件部分也不放在圆括号里，但程序体中需要用到大括号。这里还有一个可选的else部分，当条件为false时执行。
map存储一个键/值对集合，并且提供常量时间的操作来存储、获取或测试集合中的某个元素。
键可以是其值能够进行相等（==）比较的任意类型。 值可以是任意类型。 键在map中不存在也是没问题的。当一个新的行第一次出现时，右边的表达式根据值类型被推演为零值。
map里面的键的迭代顺序不是固定的，通常是随机的，每次运行都不一致。
bufio包可以简便高效地处理输入和输出。 类型Scanner，扫描器，它可以读取输入，以行或者单词为单位断开，这是处理以行为单位的输入内容的最简单方式。
程序使用短变量的声明方式，新建一个bufio.Scanner类型input变量：
input := bufio.NewScanner(os.Stdin) 扫描器从程序的标准输入进行读取。每一次调用input.Scan()读取下一行，并且将结尾的换行符去掉；Scan()函数在读到新行的时候返回true，在没有更多内容时返回false。 通过调用input.Text()来获取读到的内容。
// 打印输入中多次出现的行的个数和文本 // 它从 stdin 或指定的文件列表读取 package main import ( &amp;#34;bufio&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) func main() { counts := make(map[string]int) files := os.</description>
    </item>
    
    <item>
      <title>GIF 动画</title>
      <link>https://zakyu.com/learn-go/tutorial/animated-gifs/</link>
      <pubDate>Wed, 04 Jan 2023 23:08:49 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/tutorial/animated-gifs/</guid>
      <description>package main import ( &amp;#34;image&amp;#34; &amp;#34;image/color&amp;#34; &amp;#34;image/gif&amp;#34; &amp;#34;io&amp;#34; &amp;#34;log&amp;#34; &amp;#34;math&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os&amp;#34; &amp;#34;time&amp;#34; ) var palette = []color.Color{color.White, color.Black} const ( whiteIndex = 0 blackIndex = 1 ) func main() { rand.Seed(time.Now().UTC().UnixNano()) if len(os.Args) &amp;gt; 1 &amp;amp;&amp;amp; os.Args[1] == &amp;#34;web&amp;#34; { handler := func(w http.ResponseWriter, r *http.Request) { lissajous(w) } http.HandleFunc(&amp;#34;/&amp;#34;, handler) log.Fatal(http.ListenAndServe(&amp;#34;localhost:8080&amp;#34;, nil)) } lissajous(os.Stdout) } func lissajous(out io.Writer) { const ( cycles = 5 res = 0.001 size = 100 nframes = 64 delay = 8 ) freq := rand.</description>
    </item>
    
    <item>
      <title>获取一个 URL</title>
      <link>https://zakyu.com/learn-go/tutorial/fetching-a-url/</link>
      <pubDate>Wed, 04 Jan 2023 23:56:54 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/tutorial/fetching-a-url/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os&amp;#34; ) func main() { for _, url := range os.Args { resp, err := http.Get(url) if err != nil { fmt.Fprintf(os.Stderr, &amp;#34;fetch: %v\n&amp;#34;, err) os.Exit(1) } b, err := ioutil.ReadAll(resp.Body) resp.Body.Close() if err != nil { fmt.Fprintf(os.Stderr, &amp;#34;fetch: %v\n&amp;#34;, err) os.Exit(1) } fmt.Printf(&amp;#34;%s&amp;#34;, b) } } http.Get函数产生一个HTTP请求。</description>
    </item>
    
    <item>
      <title>并发获取多个 URL</title>
      <link>https://zakyu.com/learn-go/tutorial/fetching-urls-concurrently/</link>
      <pubDate>Thu, 05 Jan 2023 18:24:04 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/tutorial/fetching-urls-concurrently/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;io&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os&amp;#34; &amp;#34;time&amp;#34; ) func main() { start := time.Now() ch := make(chan string) for _, url := range os.Args[1:] { go fetch(url, ch) } for range os.Args[1:] { fmt.Println(&amp;lt;-ch) } fmt.Printf(&amp;#34;%.2fs elapsed\n&amp;#34;, time.Since(start).Seconds()) } func fetch(url string, ch chan&amp;lt;- string) { start := time.Now() resp, err := http.Get(url) if err != nil { ch &amp;lt;- fmt.Sprint(err) return } nbytes, err := io.Copy(ioutil.Discard, resp.</description>
    </item>
    
    <item>
      <title>一个 Web 服务器</title>
      <link>https://zakyu.com/learn-go/tutorial/a-web-server/</link>
      <pubDate>Thu, 05 Jan 2023 18:37:42 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/tutorial/a-web-server/</guid>
      <description>// 回声服务器 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { http.HandleFunc(&amp;#34;/&amp;#34;, handler) log.Fatal(http.ListenAndServe(&amp;#34;localhost:8080&amp;#34;, nil)) } func handler(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, &amp;#34;URL.Path = %q\n&amp;#34;, r.URL.Path) } // 回声服务器和计数服务器 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;sync&amp;#34; ) var mu sync.Mutex var count int func main() { http.HandleFunc(&amp;#34;/&amp;#34;, handler) http.HandleFunc(&amp;#34;/count&amp;#34;, counter) log.Fatal(http.ListenAndServe(&amp;#34;localhost:8080&amp;#34;, nil)) } func handler(w http.ResponseWriter, r *http.Request) { mu.Lock() count++ mu.Unlock() fmt.Fprintf(w, &amp;#34;URL.Path = %q\n&amp;#34;, r.</description>
    </item>
    
    <item>
      <title>更多</title>
      <link>https://zakyu.com/learn-go/tutorial/loose-ends/</link>
      <pubDate>Thu, 05 Jan 2023 19:01:36 +0800</pubDate>
      
      <guid>https://zakyu.com/learn-go/tutorial/loose-ends/</guid>
      <description> 控制流 if语句 for语句
switch语句 case语句从上到下进行推演，所以第一个匹配的case语句会被执行。 如果没有case语句符合条件，那么可选的default语句被执行。 default语句可以放在任意地方。 case语句不想C语言那样从上到下贯穿执行。（fallthrough语句可以改写这个行为）
switch语句可以不要操作数，它就像一个case语句列表，每条case语句都是一个布尔表达式：
func Signum(x int) int { switch { case x &amp;gt; 0: return +1 default: return 0 case x &amp;lt; 0: return -1 } } 这种形式称为无标签（tagless）选择，它等价于switch true。
break和continue语句可以改变控制流。
命名类型 type声明给已有类型命名。
指针 指针的值是变量的地址。 指针显式可见。 使用&amp;amp;操作符可以获取一个变量的地址。 使用*操作符可以获取指针引用的变量的值。 指针不支持算术运算
方法和接口 一个关联了命名类型的函数称为方法。 Go里面的方法可以关联到几乎所有的命名类型。
接口可以用相同的方式处理不同的具体类型的抽象类型，它基于这些类型所包含的方法，而不是类型描述或实现。
包 Go自带一个可扩展并且实用的标准库。 Go社区创建和共享了更多的库。 可以在https://golang.org/pkg找到标准包的索引。 社区贡献的包可以在https://godoc.org找到。 使用go doc工具可以方便地通过命令行访问这些文档
$ go doc http.Get 注释 单行注释：// 多行注释：/* ... */ </description>
    </item>
    
  </channel>
</rss>
